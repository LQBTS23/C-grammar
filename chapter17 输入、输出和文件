17.1 write.cpp
  #include<iostream>
#include<cstring>

int main()
{
	using std::cout;
	using std::endl;
	const char* state1 = "Florida";
	const char* state2 = "Kansas";
	const char* state3 = "Euphoria";
	int len = std::strlen(state2);
	cout << "Increasing loop index:\n";
	int i;
	for (i = 1; i <= len; i++)
	{
		cout.write(state2, i);
		cout << endl;
	}

	cout << "Decreasing loop index:\n";
	for (i = len; i > 0; i--)
		cout.write(state2, i) << endl;

	cout << "Exceeding string length:\n";
	cout.write(state2, len + 5) << endl;

	return 0;
}

17.2 defaults.cpp
#include<iostream>
int main()
{
	using std::cout;
	cout << "1234567890234567890\n";
	char ch = 'K';
	int t = 273;
	cout << ch << ":\n";
	cout << t << ":\n";
	cout << -t << ":\n";

	double f1 = 1.200;
	cout << f1 << ":\n";
	cout << (f1 + 1.0 / 9.0) << ":\n";

	double f2 = 1.67E2;
	cout << f2 << ":\n";
	f2 += 1.0 / 9.0;
	cout << f2 << ":\n";
	cout << (f2 * 1.0e4) << ":\n";
	double f3 = 2.3e-4;
	cout << f3 << ":\n";
	cout << f3 / 10 << ":\n";

	return 0;
}

17.3 manip.cpp
#include<iostream>
int main()
{
	using namespace std;
	cout << "Enter an integer: ";
	int n;
	cin >> n;

	cout << "n     n*n\n";
	cout << n << "    " << n * n << " (decimal)\n";

	cout << hex;
	cout << n << "    ";
	cout << n * n << "(hexadecimal)\n";

	cout << oct << n << "   " << n * n << "(octal)\n";

	dec(cout);
	cout << n << "    " << n * n << "(decimal)\n";
	return 0;
}

17.6 precise.cpp
#include<iostream>
int main()
{
	using std::cout;
	float price1 = 20.40;
	float price2 = 1.9 + 9.0 / 9.0;

	cout << "\"Furry Friends\" is $" << price1 << "!\n";
	cout << "\"Fiery Friends\" is $" << price2 << "!\n";

	cout.precision(2);
	cout << "\"Furry Friends\" is $" << price1 << "!\n";
	cout << "\"Fiery Friends\" is $" << price2 << "!\n";
	return 0;
}

17.7 showpt.cpp
#include<iostream>
int main()
{
	using std::cout;
	using std::ios_base;
	float price1 = 20.40;
	float price2 = 1.9 + 9.0 / 9.0;

	cout.setf(ios_base::showpoint);
	cout << "\"Furry Friends\" is $" << price1 << "!\n";
	cout << "\"Fiery Friends\" is $" << price2 << "!\n";

	cout.precision(2);
	cout << "\"Furry Friends\" is $" << price1 << "!\n";
	cout << "\"Fiery Friends\" is $" << price2 << "!\n";
	return 0;
}

17.9 setf2.cpp
#include<iostream>
#include<cmath>

int main()
{
	using namespace std;
	//左对齐，显示加号，显示末尾0
	cout.setf(ios_base::left, ios_base::adjustfield);
	cout.setf(ios_base::showpos);
	cout.setf(ios_base::showpoint);
	cout.precision(3);

	ios_base::fmtflags old = cout.setf(ios_base::scientific, ios_base::floatfield);
	cout << "Left Justification:\n";
	long n;
	for (n = 1; n < 41; n += 10)
	{
		cout.width(4);
		cout << n << "|";
		cout.width(12);
		cout << sqrt(double(n)) << "|\n";
	}
        //内部对齐
	cout.setf(ios_base::internal, ios_base::adjustfield);
	cout.setf(old, ios_base::floatfield);
        
	cout << "Internal Justification:\n";
	for (n = 1; n < 41; n += 10)
	{
		cout.width(4);
		cout << n << "|";
		cout.width(12);
		cout << sqrt(double(n)) << "|\n";
	}

	cout.setf(ios_base::right, ios_base::adjustfield);
	cout.setf(ios_base::fixed, ios_base::floatfield);
	cout << "Right Justification:\n";
	for (n = 1; n < 41; n += 10)
	{
		cout.width(4);
		cout << n << "|";
		cout.width(12);
		cout << sqrt(double(n)) << "|\n";
	}
	return 0;
}

17.10 iomanip.cpp
#include<iostream>
#include<cmath>
#include<iomanip>
int main()
{
	using namespace std;
	cout << fixed << right;

	cout << setw(6) << "N" << setw(14) << "square root"
		<< setw(15) << "fourth root\n";

	double root;
	for (int n = 10; n <= 100; n += 10)
	{
		root = sqrt(double(n));
		cout << setw(6) << setfill('.') << n << setfill(' ')
			<< setw(12) << setprecision(3) << root
			<< setw(14) << setprecision(4) << sqrt(root)
			<< endl;
	}
	return 0;
}

17.12 cinexcp.cpp
#include<iostream>
#include<exception>

int main()
{
	using namespace std;
	cin.exceptions(ios_base::failbit);
	cout << "Enter numbers: ";
	int sum = 0;
	int input;
	try {
		while (cin >> input)
		{
			sum += input;
		}
	}
	catch (ios_base::failure & bf)
	{
		cout << bf.what() << endl;
		cout << "O! the horror!\n";
	}

	cout << "Last value entered = " << input << endl;
	cout << "Sum = " << sum << endl;
	return 0;
}

17.14 peeker.cpp
#include<iostream>
const int Limit = 255;

int main()
{
	using std::cout;
	using std::cin;
	using std::endl;

	char ch;
	while (cin.get(ch))
	{
		if (ch != '#')
			cout << ch;
		else
		{
			cin.putback(ch);
			break;
		}
	}
	if (!cin.eof())
	{
		cin.get(ch);
		cout << endl << ch << " is next input character.\n";
	}
	else
	{
		cout << "End of file reached.\n";
		std::exit(0);
	}

	while (cin.peek() != '#')
	{
		cin.get(ch);
		cout << ch;
	}
	
	if (!cin.eof())
	{
		cin.get(ch);
		cout << endl << ch << " is next input character.\n";
	}
	else
		cout << "End of file reached.\n";

	return 0;
}


17.15 truncate.cpp
#include<iostream>
#include<exception>

const int SLEN = 10;
inline void eatline() { while (std::cin.get() != '\n') continue; }
int main()
{
	using std::cin;
	using std::cout;
	using std::endl;

	char name[SLEN];
	char title[SLEN];
	cout << "Enter your name: ";
	cin.get(name, SLEN);
	if (cin.peek() != '\n')
		cout << "Sorry, we only have enough room for "
		<< name << endl;

	eatline();
	cout << "Dear " << name << ",enter your title:\n";
	cin.get(title, SLEN);
	if (cin.peek() != '\n')
		cout << "We were forced to truncate your title.\n";
	eatline();
	cout << " Name: " << name
		<< "\nTitle: " << title << endl;

	return 0;
}

17.16 fileio.cpp
#include<iostream>
#include<fstream>
#include<string>

int main()
{
	using namespace std;
	string filename;

	cout << "Enter name for new file: ";
	cin >> filename;

	//create output stream object for new file and call it fout
	ofstream fout(filename.c_str());

	fout << "For your eyes only!\n";
	cout << "Enter your secret number: ";
	float secret;
	cin >> secret;
	fout << "Your secret number is " << secret << endl;
	fout.close();

	//create input stream object for new file and call it fin
	ifstream fin(filename.c_str());
	cout << "Here are the contents of " << filename << ":\n";
	char ch;
	while (fin.get(ch))
		cout << ch;
	cout << "Done\n";
	fin.close();
	return 0;
}

17.17  count.cpp
#include<iostream>
#include<fstream>
#include<cstdlib> //for exit()

int main(int argc, char* argv[])
{
	using namespace std;
	if (argc == 1)
	{
		cerr << "Usage: " << argv[0] << " filename[s]\n";
		exit(EXIT_FAILURE);
	}

	ifstream fin;
	long count;
	long total = 0;

	char ch;
	for (int file = 1; file < argc; file++)
	{
		fin.open(argv[file]);
		if (!fin.is_open())
		{
			cerr << "Could not open " << argv[file] << endl;
			fin.clear();
			continue;
		}
		count = 0;
		while (fin.get(ch))
			count++;
		cout << count << " characters in " << argv[file] << endl;
		total += count;
		fin.clear();
		fin.close();
	}
	cout << total << " characters in all files\n";
	return 0;

}

17.18 append.cpp
#include<iostream>
#include<fstream>
#include<string>
#include<cstdlib>

const char* file = "guests.txt";
int main()
{
	using namespace std;
	char ch;
	ifstream fin;
	fin.open(file);

	if (fin.is_open())
	{
		cout << "Here are the current contents of the " << file << " file:\n";
		while (fin.get(ch))
			cout << ch;
		fin.close();
	}

	//add new names;
	ofstream fout(file, ios::out | ios::app);
	if (!fout.is_open())
	{
		cerr << "Can't open " << file << " file for output.\n";
		exit(EXIT_FAILURE);
	}

	cout << "Enter guest names （enter a blank line to quit):\n";
	string name;
	while (getline(cin, name) && name.size() > 0)
	{
		fout << name << endl;
	}
	fout.close();

	fin.clear();
	fin.open(file);
	if (fin.is_open())
	{
		cout << "Here are the current contents of the " << file << " file:\n";
		while (fin.get(ch))
			cout << ch;
		fin.close();
	}

	cout << "Done.\n";
	return 0;
}

17.19 binary.cpp
#include<iostream>
#include<fstream>
#include<iomanip>
#include<cstdlib> //for exit()

inline void eatline() { while (std::cin.get() != '\n') continue; }

struct planet
{
	char name[20];
	double population;
	double g;
};

const char* file = "planets.dat";
int main()
{
	using namespace std;
	planet p1;
	cout << fixed << right;

	ifstream fin;
	fin.open(file, ios_base::in | ios_base::binary);
	if (fin.is_open())
	{
		cout << "Here are the current contents of the "
			<< file << " file:\n";
		while (fin.read((char*)&p1, sizeof p1))
		{
			cout << setw(20) << p1.name << ": "
				<< setprecision(0) << setw(12) << p1.population
				<< setprecision(2) << setw(6) << p1.g << endl;
		}
		fin.close();
	}

	ofstream fout(file, ios_base::out | ios_base::app | ios_base::binary);
	if (!fout.is_open())
	{
		cerr << "Can't open " << file << " file for output:\n";
		exit(EXIT_FAILURE);
	}

	cout << "Enter planet name(enter a blank line to quit):\n";
	cin.get(p1.name, 20);
	while (p1.name[0] != '\0')
	{
		eatline();
		cout << "Enter planetary population: ";
		cin >> p1.population;
		cout << "Enter planet's acceleration of gravity: ";
		cin >> p1.g;
		eatline();
		fout.write((char*)&p1, sizeof p1);
		cout << "Enter planet name (enter a blank line to quit):\n";
		cin.get(p1.name, 20);
	}
	fout.close();

	fin.clear();
	fin.open(file, ios_base::in | ios_base::binary);
	if (fin.is_open())
	{
		cout << "Here are the current contents of the "
			<< file << " file:\n";
		while (fin.read((char*)&p1, sizeof p1))
		{
			cout << setw(20) << p1.name << ": "
				<< setprecision(0) << setw(12) << p1.population
				<< setprecision(2) << setw(6) << p1.g << endl;
		}
		fin.close();
	}
	cout << "Done.\n";
	return 0;
}


17.20 random.cpp
#include<iostream>
#include<fstream>
#include<iomanip>
#include<cstdlib> //for exit()

inline void eatline() { while (std::cin.get() != '\n') continue; }
const int LIM = 20;
struct planet
{
	char name[LIM];
	double population;
	double g;
};

const char* file = "planets.dat";
int main()
{
	using namespace std;
	planet p1;
	cout << fixed << right;

	fstream finout;
	finout.open(file, ios_base::in | ios_base::binary);
	int ct = 0;
	if (finout.is_open())
	{
		finout.seekg(0);
		cout << "Here are the current contents of the "
			<< file << " file:\n";
		while (finout.read((char*)&p1, sizeof p1))
		{
			cout << ct++<<":"<<setw(LIM) << p1.name << ": "
				<< setprecision(0) << setw(12) << p1.population
				<< setprecision(2) << setw(6) << p1.g << endl;
		}
		if (finout.eof())
			finout.clear();
		else
		{
			cerr << "Error in reading " << file << ".\n";
			exit(EXIT_FAILURE);
		}
	}
	else {
		cerr << file << " could not be opened -- bye.\n";
		exit(EXIT_FAILURE);
	}

	ofstream fout(file, ios_base::out | ios_base::app | ios_base::binary);
	if (!fout.is_open())
	{
		cerr << "Can't open " << file << " file for output:\n";
		exit(EXIT_FAILURE);
	}
	
	cout << "Enter the record number you wish to change: ";
	long rec;
	cin >> rec;
	eatline();
	if (rec < 0 || rec >= ct)
	{
		cerr << "Invalid record number --bye\n";
		exit(EXIT_FAILURE);
	}
	streampos place = rec * sizeof p1;
	finout.seekg(place);
	if (fout.fail())
	{
		cerr << "Error on attempted seek\n";
		exit(EXIT_FAILURE);
	}

	finout.read((char*)&p1, sizeof p1);
	cout << "Your selection:\n";
	cout << rec << ": " << setw(LIM) << p1.name << ": "
		<< setprecision(0) << setw(12) << p1.population
		<< setprecision(2) << setw(6) << p1.g << endl;

	if (finout.eof())
		finout.clear();

	cout << "Enter planet name: ";
	cin.get(p1.name, 20);
	eatline();
	cout << "Enter planetary population: ";
	cin >> p1.population;
	cout << "Enter planet's acceleration of gravity: ";
	cin >> p1.g;
	finout.seekp(place);
	fout.write((char*)&p1, sizeof p1) << flush;
	if (fout.fail())
	{
		cerr << "Error on attempted write\n";
		exit(EXIT_FAILURE);
	}

	ct = 0;
	finout.seekg(0);
	cout << "Here are the current contents of the "
		<< file << " file:\n";
	while (finout.read((char*)&p1, sizeof p1))
	{
		cout << setw(20) << p1.name << ": "
			<< setprecision(0) << setw(12) << p1.population
			<< setprecision(2) << setw(6) << p1.g << endl;
	}
	finout.close();
	cout << "Done.\n";
	return 0;
}
