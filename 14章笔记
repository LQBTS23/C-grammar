14.3 多重继承
1.公有继承必须使用关键字public来限定每一个基类，除非特别指出，否则编译器将认为是私有派生：
eg: class SingerWaiter: public Waiter,public Singer
2.上述Singer和Waiter 都继承了一个Worker组件，因此SingingWaiter将包含两个Worker基类子对象，将派生类对象的地址赋值给基类指针时将出现二义性；
解决办法1：使用类型转换来指定对象：SingingWaiter ed;
                                  Worker * pw1 = (Waiter *) &ed;
 
解决办法2：使用虚基类，使得从多个类(他们的基类相同)派生出的对象只继承一个基类对象。
eg:  class Singer: virtual public Worker{...}
       class Waiter: virtual public Worker{...}
       class SingingWaiter:public Singer, public Waiter{...}

现在SingingWaiter对象只包含Worker对象的一个副本。

3.使用虚基类时，需要对类构造函数采用一种新的方法，C++在基类是虚的时候，禁止信息通过中间类自动传递给基类。
   然而，编译器必须在构造派生类对象之前构造基类对象，在上述情况下，编译器将使用Worker的默认构造函数。
  如果不希望默认构造函数来构造虚基类对象，则需要显式地调用所需的基类构造函数。
eg: SingingWaiter(const Worker & wk,int p =0,int v = Singer::other):Worker(wk),Waiter(wk,p),Singer(wk,v){}
总结：如果类有间接虚基类，则除非只需使用该虚基类的默认构造函数，否则必须显式的调用该虚基类的某个构造函数。

4.例如，在多重继承中，每个直接祖先都有一个Show()函数，这使得当前子类调用Show()是二义性的，因为不知道调用的是哪个直接祖先的函数
即：多重继承可能导致函数调用的二义性。
解决方法1：可以使用作用域运算符来澄清编程者的意图：
eg: SingingWaiter newhire(.....);
    newhire.Singer::Show();
解决方法2：在SingingWaiter中重新定义Show(),并指出要使用哪个show()
eg:  void SingingWaiter::Show()
{
   Singer::Show();
}
子类、间接基类、虚基类的Show()函数、成员数据设置函数可以使用套娃的形式进行，具体例子见562
