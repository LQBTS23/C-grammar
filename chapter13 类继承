例题 13.10
// brass.h
#pragma once
#ifndef BRASS_H_
#define BRASS_H_
#include<string>
class Brass
{
private:
	std::string fullName;
	long acctNum;
	double balance;
public:
	Brass(const std::string & s = "Nullbody", long an = -1, double bal = 0.0);
	void Deposit(double amt);
	virtual void Withdraw(double amt);
	double Balance() const;
	virtual void ViewAcct() const;
	virtual ~Brass(){}

};

class BrassPlus :public Brass
{
private:
	double maxLoan;
	double rate;
	double owesBank;
public:
	BrassPlus(const std::string & s = "Nullbody", long an = -1, double bal = 0.0, double ml = 500,double r = 0.11125);
	BrassPlus(const Brass & ba, double ml = 500, double r = 0.11125);
	virtual void Withdraw(double amt);
	virtual void ViewAcct() const;
	void ResetRate(double r) { rate = r; };
	void ResetOwes() { owesBank = 0; }
};
#endif // !BRASS_H_

//brass.cpp
	#include<iostream>
	#include "brass.h"
	using namespace std;

	typedef std::ios_base::fmtflags format;
	typedef std::streamsize precis;
	format setFormat();
	void restore(format f, precis p);

	Brass::Brass(const string & s, long an, double bal)
	{
		fullName = s;
		acctNum = an;
		balance = bal;
	}

	void Brass::Deposit(double amt)
	{
		if (amt < 0)
			cout << "Negative deposit not allowed; "
			<< "deposit is canceled.\n";
		else
			balance += amt;
	}

	void Brass::Withdraw(double amt)
	{
		format initialState = setFormat();
		precis prec = cout.precision(2);

		if (amt < 0)
			cout << "Withdrawal amount must be positive; "
			<< "withdrawal canceled.\n";
		else if (amt <= balance)
			balance -= amt;
		else
			cout << "Withdrawal amount of $" << amt
			<< " exceeds your balance.\n"
			<< "Withdrawal canceled.\n";
		restore(initialState, prec);
	}

	double Brass::Balance() const
	{
		return balance;
	}

	void Brass::ViewAcct() const
	{
		format initialState = setFormat();
		precis prec = cout.precision(2);
		cout << "Client: " << fullName << endl;
		cout << "Account Number: " << acctNum << endl;
		cout << "Balance: $" << balance << endl;
		restore(initialState, prec);
	}

	BrassPlus::BrassPlus(const string & s, long an, double bal, double ml, double r) :Brass(s, an, bal)
	{
		maxLoan = ml;
		owesBank = 0.0;
		rate = r;
	}

	BrassPlus::BrassPlus(const Brass & ba, double ml, double r) :Brass(ba)
	{
		maxLoan = ml;
		owesBank = 0.0;
		rate = r;
	}

	void BrassPlus::ViewAcct() const
	{
		format initialState = setFormat();
		precis prec = cout.precision(2);

		Brass::ViewAcct();
		cout << "Maxinum loan: $" << maxLoan << endl;
		cout << "Owed to bank: $" << owesBank << endl;
		cout.precision(3);
		cout << "Loan rate: " << 100 * rate << "%\n";
		restore(initialState, prec);
	}

	void BrassPlus::Withdraw(double amt)
	{
		format initialState = setFormat();
		precis prec = cout.precision(2);

		double bal = Balance();
		if (amt <= bal)
			Brass::Withdraw(amt);
		else if (amt <= bal + maxLoan - owesBank)
		{
			double advance = amt - bal;
			owesBank += advance * (1.0 + rate);
			cout << "Bank advance: $" << advance << endl;
			cout << "Finance charge: $" << advance * rate << endl;
			Deposit(advance);
			Brass::Withdraw(amt);
		}
		else
			cout << "Credit limit exceeded. Transaction cancelled.\n";
		restore(initialState, prec);
	}

	format setFormat()
	{
		return cout.setf(std::ios_base::fixed, std::ios_base::floatfield);
	}

	void restore(format f, precis p)
	{
		cout.setf(f, std::ios_base::floatfield);
		cout.precision(p);
	}

//usebrass2.cpp
#include<iostream>
#include<string>
#include "brass.h"

const int CLIENTS = 4;

int main()
{
	using namespace std;
	Brass * p_clients[CLIENTS];
	std::string temp;
	long tempnum;
	double tempbal;
	char kind;
	for (int i = 0; i < CLIENTS; i++)
	{
		cout << "Enter client's name: ";
		getline(cin, temp);
		cout << "Enter client's account number: ";
		cin >> tempnum;
		cout << "Enter opening balance: $";
		cin >> tempbal;
		cout << "Enter 1 for Brass Account or "
			<< "2 for BrassPlus Account: ";
		while (cin >> kind && (kind != '1' && kind != '2'))
			cout << "Enter either 1 or 2: ";
		if (kind == '1')
			p_clients[i] = new Brass(temp, tempnum, tempbal);
		else
		{
			double tmax, trate;
			cout << "Enter the overdraft limit: $";
			cin >> tmax;
			cout << "Enter the interest rate "
				<< "as a decimal fraction: ";
			cin >> trate;
			p_clients[i] = new BrassPlus(temp, tempnum, tempbal, tmax, trate);
		}
		while (cin.get() != '\n')
			continue;
	}
	cout << endl;
	for (int i = 0; i < CLIENTS; i++)
	{
		p_clients[i]->ViewAcct();
		cout << endl;

	}
	for (int i = 0; i < CLIENTS; i++)
	{
		delete p_clients[i];
	}
	cout << "Done.\n";
	return 0;
}

例题 13.11
  
